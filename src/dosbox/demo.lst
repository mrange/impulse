     1                                  ; Assemble with: nasm -f bin -o demo.com demo.asm -l demo.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 0x100
     7                                  
     8                                  SIN     equ 0
     9                                  COS     equ 4
    10                                  X       equ 8
    11                                  Y       equ 10
    12                                  TIME    equ 12
    13                                  _BITS   equ 14
    14                                  
    15                                  start:
    16                                      ; si seem initialized to 0x100. If we shift right it becomes 0x80
    17                                      ;   Where the command line should be
    18 00000000 D1EE                        shr si, 1
    19                                      ; Set video mode (320x200, 256 colors)
    20 00000002 B81300                      mov ax, 0x13
    21 00000005 CD10                        int 10h
    22                                  
    23                                      ; Initialize video memory segment
    24 00000007 6800A0                      push 0xA000
    25 0000000A 07                          pop es
    26                                  
    27                                  main_loop:
    28                                      ; Load DOS timer
    29 0000000B 64DF066C04                  fild word fs:[046Ch]
    30 00000010 D80E[C500]                  fmul dword [_0_005]
    31                                      ; Load sin cos
    32 00000014 D9FB                        fsincos
    33 00000016 D95C04                      fstp dword [si+COS]
    34 00000019 D91C                        fstp dword [si+SIN]
    35                                  
    36                                      ; Reset position to start of video memory
    37 0000001B 31FF                        xor di, di
    38                                  
    39 0000001D C7440AC800                  mov word [si+Y], 200
    40                                  y_loop:
    41 00000022 C744084001                  mov word [si+X], 320
    42                                  x_loop:
    43                                      ; Z (0.5)
    44 00000027 D906[C900]                  fld dword [_0_5]
    45                                  
    46 0000002B DF440A                      fild word [si+Y]
    47 0000002E D80E[C500]                  fmul dword [_0_005]
    48 00000032 D8E1                        fsub st1
    49                                  
    50 00000034 DF4408                      fild word [si+X]
    51 00000037 D80E[C500]                  fmul dword [_0_005]
    52 0000003B D826[CD00]                  fsub dword [_0_8]
    53                                  
    54                                      ; expected stack
    55                                      ; ST(0) x
    56                                      ; ST(1) y
    57                                      ; ST(2) z
    58                                  
    59 0000003F B90300                      mov cx, 3
    60                                  t_loop:
    61 00000042 D9CA                        fxch st2
    62 00000044 D9C9                        fxch st1
    63                                  
    64                                      ; y' = y*cos - x*sin
    65 00000046 D9C1                        fld     st1
    66 00000048 D84C04                      fmul dword [si+COS]
    67 0000004B D9C1                        fld     st1
    68 0000004D D80C                        fmul dword [si+SIN]
    69 0000004F DEE9                        fsub
    70                                  
    71                                      ; x' = x*cos + y*sin
    72 00000051 D9C1                        fld     st1
    73 00000053 D84C04                      fmul dword [si+COS]
    74 00000056 D9C3                        fld     st3
    75 00000058 D80C                        fmul dword [si+SIN]
    76 0000005A DEC1                        fadd
    77                                  
    78                                      ; Overwrite x with x'
    79 0000005C DDDA                        fstp    st2
    80                                      ; Overwrite y with y'
    81 0000005E DDDA                        fstp    st2
    82                                  
    83 00000060 E2E0                        loop t_loop
    84                                  
    85                                      ; Scale
    86 00000062 D9E8                        fld1
    87 00000064 DDDC                        fstp st4
    88                                  
    89                                      ; expected stack
    90                                      ; ST(0) x
    91                                      ; ST(1) y
    92                                      ; ST(2) z
    93                                      ; ST(3) scale
    94                                  
    95                                      ; Appollian loop
    96 00000066 B80400                      mov ax,4
    97                                  a_loop:
    98                                      ; p -= 2.*round(0.5*p);
    99 00000069 D9EE                        fldz
   100 0000006B DDDD                        fstp st5
   101                                  
   102                                      ; TODO: mov cl, 3 seems to work and saves 1 byte
   103 0000006D B90300                      mov cx, 3
   104                                  r_loop:
   105                                      ; Rotate ST(0..2)
   106 00000070 D9CA                        fxch st2
   107 00000072 D9C9                        fxch st1
   108                                      ; Dupe
   109 00000074 D9C0                        fld     st0
   110                                      ; Divide by 2
   111 00000076 D80E[C900]                  fmul dword [_0_5]
   112 0000007A D9FC                        frndint
   113                                      ; Multiply by 2
   114 0000007C D8C0                        fadd    st0
   115 0000007E DEE9                        fsub
   116                                  
   117 00000080 D9C0                        fld     st0
   118 00000082 D8C8                        fmul    st0
   119 00000084 DEC5                        faddp   st5, st0
   120                                  
   121 00000086 E2E8                        loop r_loop
   122                                  
   123                                      ; k = 2/dot(p,p)
   124 00000088 D9E8                        fld1
   125 0000008A D8C0                        fadd    st0
   126 0000008C D8F5                        fdiv    st5
   127                                  
   128                                      ; p *= k
   129 0000008E DCC9                        fmul    st1,st0
   130 00000090 DCCA                        fmul    st2,st0
   131 00000092 DCCB                        fmul    st3,st0
   132                                      ; scale *= k
   133 00000094 DECC                        fmulp   st4,st0
   134                                  
   135 00000096 48                          dec ax
   136 00000097 75D0                        jnz a_loop
   137                                  
   138                                      ; Compute distance
   139 00000099 D9E1                        fabs
   140 0000009B D8F3                        fdiv    st3
   141                                  
   142                                      ; Hacky colors
   143 0000009D D95C0E                      fstp dword [si+_BITS]
   144 000000A0 8A4411                      mov al, [si+_BITS+3]
   145 000000A3 2C10                        sub al,16
   146                                  
   147                                      ; Clean up stack (if not the DosBox dynamic mode fails)
   148 000000A5 DDD8                        fstp st0
   149 000000A7 DDD8                        fstp st0
   150                                  
   151                                      ; Write pixel
   152 000000A9 AA                          stosb
   153                                  
   154 000000AA FF4C08                      dec word [si+X]
   155 000000AD 0F8576FF                    jnz x_loop
   156                                  
   157 000000B1 FF4C0A                      dec word [si+Y]
   158 000000B4 0F856AFF                    jnz y_loop
   159                                  
   160                                      ; Check for ESC to exit
   161 000000B8 E460                        in  al, 0x60
   162 000000BA 48                          dec ax
   163 000000BB 0F854CFF                    jnz main_loop
   164                                  
   165 000000BF B80300                      mov ax, 0x0003
   166 000000C2 CD10                        int 0x10
   167                                  
   168 000000C4 C3                          ret
   169                                  
   170                                  ; Data section
   171 000000C5 0AD7A33B                _0_005      dd  0.005
   172 000000C9 0000003F                _0_5        dd  0.5
   173 000000CD CDCC4C3F                _0_8        dd  0.8
   174                                  
   175                                  section .bss
