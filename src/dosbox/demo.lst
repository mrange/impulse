     1                                  ; Assemble with: nasm -f bin -o demo.com demo.asm -l demo.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 0x100
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0x13
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Initialize video memory segment
    14 00000005 6800A0                      push 0xA000
    15 00000008 07                          pop es
    16                                  
    17                                  main_loop:
    18                                      ; Load sin cos
    19 00000009 64DB066C04                  fild dword fs:[046Ch]
    20 0000000E D80E[D600]                  fmul dword [_0_005]
    21 00000012 D9FB                        fsincos
    22 00000014 D91E[0C00]                  fstp dword [cos]
    23 00000018 D91E[0800]                  fstp dword [sin]
    24                                  
    25                                      ; Reset position to start of video memory
    26 0000001C 31FF                        xor di, di
    27                                  
    28 0000001E C706[0200]C800              mov word [y], 200
    29                                  y_loop:
    30 00000024 C706[0000]4001              mov word [x], 320
    31                                  x_loop:
    32                                      ; Z (0.5)
    33 0000002A D906[DA00]                  fld dword [_0_5]
    34                                  
    35 0000002E DF06[0200]                  fild word [y]
    36 00000032 D80E[D600]                  fmul dword [_0_005]
    37 00000036 D8E1                        fsub st1
    38                                  
    39 00000038 DF06[0000]                  fild word [x]
    40 0000003C D80E[D600]                  fmul dword [_0_005]
    41 00000040 D826[DE00]                  fsub dword [_0_8]
    42                                  
    43                                      ; expected stack
    44                                      ; ST(0) x
    45                                      ; ST(1) y
    46                                      ; ST(2) z
    47                                  
    48 00000044 B90300                      mov cx, 3
    49                                  t_loop:
    50 00000047 D9CA                        fxch st2
    51 00000049 D9C9                        fxch st1
    52                                  
    53                                      ; y' = y*cos - x*sin
    54 0000004B D9C1                        fld     st1
    55 0000004D D80E[0C00]                  fmul dword [cos]
    56 00000051 D9C1                        fld     st1
    57 00000053 D80E[0800]                  fmul dword [sin]
    58 00000057 DEE9                        fsub
    59                                  
    60                                      ; x' = x*cos + y*sin
    61 00000059 D9C1                        fld     st1
    62 0000005B D80E[0C00]                  fmul dword [cos]
    63 0000005F D9C3                        fld     st3
    64 00000061 D80E[0800]                  fmul dword [sin]
    65 00000065 DEC1                        fadd
    66                                  
    67                                      ; Overwrite x with x'
    68 00000067 DDDA                        fstp    st2
    69                                      ; Overwrite y with y'
    70 00000069 DDDA                        fstp    st2
    71                                  
    72 0000006B E2DA                        loop t_loop
    73                                  
    74                                      ; Scale
    75 0000006D D9E8                        fld1
    76 0000006F DDDC                        fstp st4
    77                                  
    78                                      ; expected stack
    79                                      ; ST(0) x
    80                                      ; ST(1) y
    81                                      ; ST(2) z
    82                                      ; ST(3) scale
    83                                  
    84                                      ; Appollian loop
    85 00000071 B80400                      mov ax,4
    86                                  a_loop:
    87                                      ; p -= 2.*round(0.5*p);
    88 00000074 D9EE                        fldz
    89 00000076 DDDD                        fstp st5
    90                                  
    91 00000078 B90300                      mov cx, 3
    92                                  r_loop:
    93                                      ; Rotate ST(0..2)
    94 0000007B D9CA                        fxch st2
    95 0000007D D9C9                        fxch st1
    96                                      ; Dupe
    97 0000007F D9C0                        fld     st0
    98                                      ; Divide by 2
    99 00000081 D80E[DA00]                  fmul dword [_0_5]
   100 00000085 D9FC                        frndint
   101                                      ; Multiply by 2
   102 00000087 D8C0                        fadd    st0
   103 00000089 DEE9                        fsub
   104                                  
   105 0000008B D9C0                        fld     st0
   106 0000008D D8C8                        fmul    st0
   107 0000008F DEC5                        faddp   st5, st0
   108                                  
   109 00000091 E2E8                        loop r_loop
   110                                  
   111                                      ; k = 2/dot(p,p)
   112 00000093 D9E8                        fld1
   113 00000095 D8C0                        fadd    st0
   114 00000097 D8F5                        fdiv    st5
   115                                  
   116                                      ; p *= k
   117 00000099 DCC9                        fmul    st1,st0
   118 0000009B DCCA                        fmul    st2,st0
   119 0000009D DCCB                        fmul    st3,st0
   120                                      ; scale *= k
   121 0000009F DCCC                        fmul    st4,st0
   122                                  
   123                                      ; Pop k
   124 000000A1 DDD8                        fstp    st0
   125                                  
   126 000000A3 48                          dec ax
   127 000000A4 75CE                        jnz a_loop
   128                                  
   129                                      ; Compute distance
   130 000000A6 D9E1                        fabs
   131 000000A8 D8F3                        fdiv    st3
   132                                  
   133                                      ; Hacky colors
   134 000000AA D91E[0400]                  fstp dword [_bits]
   135 000000AE A0[0700]                    mov al, [_bits+3]
   136 000000B1 2C10                        sub al,16
   137                                  
   138                                      ; Clean up stack (if not the DosBox dynamic mode fails)
   139 000000B3 DDD8                        fstp st0
   140 000000B5 DDD8                        fstp st0
   141                                  
   142                                      ; Write pixel
   143 000000B7 AA                          stosb
   144                                  
   145 000000B8 FF0E[0000]                  dec word [x]
   146 000000BC 0F856AFF                    jnz x_loop
   147                                  
   148 000000C0 FF0E[0200]                  dec word [y]
   149 000000C4 0F855CFF                    jnz y_loop
   150                                  
   151                                      ; Check for keypress to exit
   152 000000C8 B401                        mov ah, 1
   153 000000CA CD16                        int 16h
   154 000000CC 0F8439FF                    jz main_loop
   155                                  
   156                                      ; Restore text mode
   157 000000D0 B80300                      mov ax, 0x0003
   158 000000D3 CD10                        int 0x10
   159                                  
   160 000000D5 C3                          ret
   161                                  
   162                                  ; Data section
   163 000000D6 0AD7A33B                _0_005      dd  0.005
   164 000000DA 0000003F                _0_5        dd  0.5
   165 000000DE CDCC4C3F                _0_8        dd  0.8
   166                                  
   167                                  section .bss
   168 00000000 ????                    x           resb 2
   169 00000002 ????                    y           resb 2
   170                                  
   171 00000004 ????????                _bits       resb 4
   172 00000008 ????????                sin         resb 4
   173 0000000C ????????                cos         resb 4
   174                                  
