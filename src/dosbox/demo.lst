     1                                  ; Assemble with: nasm -f bin -o demo.com demo.asm -l demo.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0013h
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Initialize video memory segment
    14 00000005 6800A0                      push 0A000h
    15 00000008 07                          pop es
    16                                  
    17                                  main_loop:
    18                                      ; Load sin cos
    19 00000009 DF06[E500]                  fild word  [time]
    20 0000000D D80E[D900]                  fmul dword [_0_005]
    21 00000011 D9FB                        fsincos
    22 00000013 D91E[0C00]                  fstp dword [cos]
    23 00000017 D91E[0800]                  fstp dword [sin]
    24                                  
    25                                      ; Reset position to start of video memory
    26 0000001B 31FF                        xor di, di
    27                                  
    28 0000001D C706[0200]C800              mov word [y], 200
    29                                  y_loop:
    30 00000023 C706[0000]4001              mov word [x], 320
    31                                  x_loop:
    32                                      ; Z (0.5)
    33 00000029 D906[DD00]                  fld dword [_0_5]
    34                                  
    35 0000002D DF06[0200]                  fild word [y]
    36 00000031 D80E[D900]                  fmul dword [_0_005]
    37 00000035 D8E1                        fsub st0, st1
    38                                  
    39 00000037 DF06[0000]                  fild word [x]
    40 0000003B D80E[D900]                  fmul dword [_0_005]
    41 0000003F D826[E100]                  fsub dword [_0_8]
    42                                  
    43                                      ; expected stack
    44                                      ; ST(0) x
    45                                      ; ST(1) y
    46                                      ; ST(2) z
    47                                  
    48 00000043 B90300                      mov cx, 3
    49                                  t_loop:
    50 00000046 D9CA                        fxch st2
    51 00000048 D9C9                        fxch st1
    52                                  
    53                                      ; y' = y*cos - x*sin
    54 0000004A D9C1                        fld     st1
    55 0000004C D80E[0C00]                  fmul dword [cos]
    56 00000050 D9C1                        fld     st1
    57 00000052 D80E[0800]                  fmul dword [sin]
    58 00000056 DEE9                        fsub
    59                                  
    60                                      ; x' = x*cos + y*sin
    61 00000058 D9C1                        fld     st1
    62 0000005A D80E[0C00]                  fmul dword [cos]
    63 0000005E D9C3                        fld     st3
    64 00000060 D80E[0800]                  fmul dword [sin]
    65 00000064 DEC1                        fadd
    66                                  
    67                                      ; Overwrite x with x'
    68 00000066 DDDA                        fstp    st2
    69                                      ; Overwrite y with y'
    70 00000068 DDDA                        fstp    st2
    71                                  
    72 0000006A E2DA                        loop t_loop
    73                                  
    74                                      ; Scale
    75 0000006C D9E8                        fld1
    76 0000006E DDDC                        fstp st4
    77                                  
    78                                      ; expected stack
    79                                      ; ST(0) x
    80                                      ; ST(1) y
    81                                      ; ST(2) z
    82                                      ; ST(3) scale
    83                                  
    84                                      ; Appollian loop
    85 00000070 B80400                      mov ax,4
    86                                  a_loop:
    87                                      ; p -= 2.*round(0.5*p);
    88 00000073 D9EE                        fldz
    89 00000075 DDDD                        fstp st5
    90                                  
    91 00000077 B90300                      mov cx,3
    92                                  r_loop:
    93                                      ; Rotate ST(0..2)
    94 0000007A D9CA                        fxch st2
    95 0000007C D9C9                        fxch st1
    96                                      ; Dupe
    97 0000007E D9C0                        fld     st0
    98                                      ; Divide by 2
    99 00000080 D80E[DD00]                  fmul dword [_0_5]
   100 00000084 D9FC                        frndint
   101                                      ; Multiply by 2
   102 00000086 D8C0                        fadd    st0
   103 00000088 DEE9                        fsub
   104                                  
   105 0000008A D9C0                        fld     st0
   106 0000008C D8C8                        fmul    st0
   107 0000008E DEC5                        faddp   st5, st0
   108                                  
   109 00000090 E2E8                        loop r_loop
   110                                  
   111                                      ; k = 2/dot(p,p)
   112 00000092 D9E8                        fld1
   113 00000094 D8C0                        fadd    st0
   114 00000096 D8F5                        fdiv    st5
   115                                  
   116                                      ; p *= k
   117 00000098 DCC9                        fmul    st1,st0
   118 0000009A DCCA                        fmul    st2,st0
   119 0000009C DCCB                        fmul    st3,st0
   120                                      ; scale *= k
   121 0000009E DCCC                        fmul    st4,st0
   122                                  
   123                                      ; Pop k
   124 000000A0 DDD8                        fstp    st0
   125                                  
   126 000000A2 48                          dec ax
   127 000000A3 75CE                        jnz a_loop
   128                                  
   129                                      ; Compute distance
   130 000000A5 D9E1                        fabs
   131 000000A7 D8F3                        fdiv    st3
   132                                  
   133                                      ; Hacky colors
   134 000000A9 D91E[0400]                  fstp dword [_bits]
   135 000000AD A0[0700]                    mov al, [_bits+3]
   136 000000B0 2C10                        sub al,16
   137                                  
   138                                      ; Clean up stack (if not the DosBox dynamic mode fails)
   139 000000B2 DDD8                        fstp st0
   140 000000B4 DDD8                        fstp st0
   141                                  
   142                                      ; Write pixel
   143 000000B6 AA                          stosb
   144                                  
   145 000000B7 FF0E[0000]                  dec word [x]
   146 000000BB 0F856AFF                    jnz x_loop
   147                                  
   148 000000BF FF0E[0200]                  dec word [y]
   149 000000C3 0F855CFF                    jnz y_loop
   150                                  
   151 000000C7 FF06[E500]                  inc word [time]
   152                                  
   153                                      ; Check for keypress to exit
   154 000000CB B401                        mov ah, 1
   155 000000CD CD16                        int 16h
   156 000000CF 0F8436FF                    jz main_loop
   157                                  
   158                                      ; Restore text mode
   159 000000D3 B80300                      mov ax, 0x0003
   160 000000D6 CD10                        int 0x10
   161                                  
   162 000000D8 C3                          ret
   163                                  
   164                                  ; Data section
   165 000000D9 0AD7A33B                _0_005      dd  0.005
   166 000000DD 0000003F                _0_5        dd  0.5
   167 000000E1 CDCC4C3F                _0_8        dd  0.8
   168                                  
   169 000000E5 0000                    time        dw  0
   170                                  
   171                                  section .bss
   172 00000000 ????                    x           resb 2
   173 00000002 ????                    y           resb 2
   174                                  
   175 00000004 ????????                _bits       resb 4
   176 00000008 ????????                sin         resb 4
   177 0000000C ????????                cos         resb 4
   178                                  
