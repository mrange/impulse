     1                                  ; DOS demo with FPU sine wave pattern
     2                                  ; Assemble with: nasm -f bin -o demo.com demo.asm
     3                                  
     4                                      ; 16-bit code
     5                                      BITS 16
     6                                       ; COM programs start at offset 100h
     7                                      ORG 100h
     8                                  
     9                                  start:
    10                                      ; Set video mode (320x200, 256 colors)
    11 00000000 B81300                      mov ax, 0013h
    12 00000003 CD10                        int 10h
    13                                  
    14                                      ; Initialize video memory segment
    15 00000005 B800A0                      mov ax, 0A000h
    16 00000008 8EC0                        mov es, ax
    17                                  
    18                                      ; PUSH 100
    19 0000000A DF06[B700]                  fild word [_100]
    20                                  
    21                                      ; PUSH 2
    22 0000000E D9E8                        fld1
    23 00000010 D9E8                        fld1
    24 00000012 DEC1                        fadd
    25                                  
    26                                  main_loop:
    27                                      ; Reset position to start of video memory
    28 00000014 31FF                        xor di, di
    29                                  
    30 00000016 C706[BB00]C800              mov word [y], 200
    31                                  y_loop:
    32 0000001C C706[B900]4001              mov word [x], 320
    33                                  x_loop:
    34                                      ; expected stack
    35                                      ; ST(0) 2
    36                                      ; ST(1) 100
    37                                  
    38                                      ; Scale
    39 00000022 D9E8                        fld1
    40                                  
    41                                      ; Z
    42 00000024 D9E8                        fld1
    43 00000026 D8F3                        fdiv st3
    44                                  
    45 00000028 DF06[BB00]                  fild word [y]
    46 0000002C D8F4                        fdiv st4
    47 0000002E D9E8                        fld1
    48 00000030 DEE9                        fsub
    49                                  
    50 00000032 DF06[B900]                  fild word [x]
    51 00000036 D8F5                        fdiv st5
    52 00000038 D906[B300]                  fld dword [_1_6]
    53 0000003C DEE9                        fsub
    54                                  
    55                                      ; expected stack
    56                                      ; ST(0) x
    57                                      ; ST(1) y
    58                                      ; ST(2) z
    59                                      ; ST(3) scale
    60                                      ; ST(4) 2
    61                                      ; ST(5) 100
    62                                  
    63                                      ; Appollian loop
    64 0000003E B005                        mov al,5
    65                                  a_loop:
    66                                      ; p -= 2.*round(0.5*p);
    67                                  
    68 00000040 B403                        mov ah,3
    69                                  r_loop:
    70                                      ; Rotate ST(0..2)
    71 00000042 D9CA                        fxch st2
    72 00000044 D9C9                        fxch st1
    73                                      ; Dupe
    74 00000046 D9C0                        fld     st0
    75                                      ; Divide by 2
    76 00000048 D8F5                        fdiv    st5
    77 0000004A D9FC                        frndint
    78                                      ; Multiply by 2
    79 0000004C D8CD                        fmul    st5
    80 0000004E DEE9                        fsub
    81 00000050 FECC                        dec ah
    82 00000052 75EE                        jnz r_loop
    83                                  
    84                                      ; dot(p,p)
    85                                      ; Dupe x
    86 00000054 D9C0                        fld     st0
    87 00000056 D8C8                        fmul    st0
    88                                  
    89                                      ; Dupe y
    90 00000058 D9C2                        fld     st2
    91 0000005A D8C8                        fmul    st0
    92                                  
    93 0000005C DEC1                        fadd
    94                                  
    95                                      ; Dupe z
    96 0000005E D9C3                        fld     st3
    97 00000060 D8C8                        fmul    st0
    98                                  
    99 00000062 DEC1                        fadd
   100                                  
   101                                      ; k = 1/dot(p,p)
   102 00000064 D9E8                        fld1
   103 00000066 DEF1                        fdivr
   104                                  
   105                                      ; p *= k
   106 00000068 DCC9                        fmul    st1,st0
   107 0000006A DCCA                        fmul    st2,st0
   108 0000006C DCCB                        fmul    st3,st0
   109                                      ; scale *= k
   110 0000006E DCCC                        fmul    st4,st0
   111                                  
   112                                      ; Pop k
   113 00000070 DDD8                        fstp    st0
   114                                  
   115 00000072 FEC8                        dec al
   116 00000074 75CA                        jnz a_loop
   117                                  
   118                                      ; Compute distance
   119 00000076 D9E1                        fabs
   120 00000078 D8F3                        fdiv    st3
   121                                  
   122                                  
   123 0000007A D906[AF00]                  fld dword [threshold]
   124                                  
   125 0000007E DFF1                        fcomip
   126 00000080 7602                        jbe set_color
   127 00000082 B032                        mov al, 0x32
   128                                  set_color:
   129                                      ; Write pixel and advance DI
   130 00000084 AA                          stosb
   131                                  
   132                                      ; Restore stack to expected state
   133                                      ; ST(0) 2
   134 00000085 DDD8                        fstp    st0
   135 00000087 DDD8                        fstp    st0
   136 00000089 DDD8                        fstp    st0
   137 0000008B DDD8                        fstp    st0
   138                                  
   139 0000008D FF0E[B900]                  dec word [x]
   140 00000091 758F                        jnz x_loop
   141                                  
   142 00000093 FF0E[BB00]                  dec word [y]
   143 00000097 7583                        jnz y_loop
   144                                  
   145 00000099 FF06[BD00]                  inc word [time]
   146                                  
   147                                      ; Check for keypress to exit
   148 0000009D B401                        mov ah, 1
   149 0000009F CD16                        int 16h
   150 000000A1 0F846FFF                    jz main_loop
   151                                  
   152                                      ; Clear keyboard buffer
   153 000000A5 B400                        mov ah, 0
   154 000000A7 CD16                        int 16h
   155                                  
   156                                      ; Clear keyboard buffer
   157 000000A9 B80300                      mov ax, 0003h
   158 000000AC CD10                        int 10h
   159 000000AE C3                          ret
   160                                  
   161                                  ; Data section
   162 000000AF 0AD7233C                threshold   dd  0.01
   163 000000B3 CDCCCC3F                _1_6        dd  1.6
   164                                  
   165 000000B7 6400                    _100        dw  100
   166 000000B9 0000                    x           dw  0
   167 000000BB 0000                    y           dw  0
   168 000000BD 0000                    time        dw  0
