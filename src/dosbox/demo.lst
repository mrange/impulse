     1                                  ; Assemble with: nasm -f bin -o demo.com demo.asm -l demo.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0013h
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Initialize video memory segment
    14 00000005 B800A0                      mov ax, 0A000h
    15 00000008 8EC0                        mov es, ax
    16                                  
    17                                  main_loop:
    18                                      ; Load sin cos
    19 0000000A DF06[C700]                  fild word  [time]
    20 0000000E D80E[BB00]                  fmul dword [_0_005]
    21 00000012 D9FB                        fsincos
    22 00000014 D91E[0C00]                  fstp dword [cos]
    23 00000018 D91E[0800]                  fstp dword [sin]
    24 0000001C DDD8                        fstp st0
    25                                  
    26                                      ; Reset position to start of video memory
    27 0000001E 31FF                        xor di, di
    28                                  
    29 00000020 C706[0200]C800              mov word [y], 200
    30                                  y_loop:
    31 00000026 C706[0000]4001              mov word [x], 320
    32                                  x_loop:
    33                                      ; PUSH 0.005
    34 0000002C D906[BB00]                  fld dword [_0_005]
    35                                  
    36                                      ; Z (0.5)
    37 00000030 D906[BF00]                  fld dword [_0_5]
    38                                  
    39 00000034 DF06[0200]                  fild word [y]
    40 00000038 D8CA                        fmul st2
    41 0000003A D9C1                        fld st1
    42 0000003C DEE9                        fsub
    43                                  
    44 0000003E DF06[0000]                  fild word [x]
    45 00000042 D8CB                        fmul st3
    46 00000044 D906[C300]                  fld dword [_0_8]
    47 00000048 DEE9                        fsub
    48                                  
    49                                      ; expected stack
    50                                      ; ST(0) x
    51                                      ; ST(1) y
    52                                      ; ST(2) z
    53                                      ; ST(3) 0.005
    54                                  
    55                                  %if 0
    56                                      fld dword [sin]
    57                                      fld dword [cos]
    58                                      mov ax, 3
    59                                  t_loop:
    60                                      fxch st2
    61                                      fxch st1
    62                                  
    63                                      ; y' = y*cos - x*sin
    64                                      fld     st1
    65                                      fmul    st4
    66                                      fld     st1
    67                                      fmul    st6
    68                                      fsub
    69                                  
    70                                      ; x' = x*cos + y*sin
    71                                      fld     st1
    72                                      fmul    st5
    73                                      fld     st3
    74                                      fmul    st7
    75                                      fadd
    76                                  
    77                                      ; Overwrite x with x'
    78                                      fstp    st2
    79                                      ; Overwrite y with y'
    80                                      fstp    st2
    81                                  
    82                                      dec ax
    83                                      jnz t_loop
    84                                  %endif
    85                                  
    86                                      ; Scale
    87 0000004A D9E8                        fld1
    88 0000004C DDDC                        fstp st4
    89                                  
    90                                      ; expected stack
    91                                      ; ST(0) x
    92                                      ; ST(1) y
    93                                      ; ST(2) z
    94                                      ; ST(3) scale
    95                                  
    96                                      ; Appollian loop
    97 0000004E B80400                      mov ax,4
    98                                  a_loop:
    99                                      ; p -= 2.*round(0.5*p);
   100                                  
   101 00000051 BB0300                      mov bx,3
   102                                  r_loop:
   103                                      ; Rotate ST(0..2)
   104 00000054 D9CA                        fxch st2
   105 00000056 D9C9                        fxch st1
   106                                      ; Dupe
   107 00000058 D9C0                        fld     st0
   108                                      ; Divide by 2
   109 0000005A D80E[BF00]                  fmul dword [_0_5]
   110 0000005E D9FC                        frndint
   111                                      ; Multiply by 2
   112 00000060 D8C0                        fadd    st0
   113 00000062 DEE9                        fsub
   114 00000064 4B                          dec bx
   115 00000065 75ED                        jnz r_loop
   116                                  
   117                                      ; dot(p,p)
   118                                      ; Dupe x
   119 00000067 D9C0                        fld     st0
   120 00000069 D8C8                        fmul    st0
   121                                  
   122                                      ; Dupe y
   123 0000006B D9C2                        fld     st2
   124 0000006D D8C8                        fmul    st0
   125                                  
   126 0000006F DEC1                        fadd
   127                                  
   128                                      ; Dupe z
   129 00000071 D9C3                        fld     st3
   130 00000073 D8C8                        fmul    st0
   131                                  
   132 00000075 DEC1                        fadd
   133                                  
   134                                      ; k = 1/dot(p,p)
   135 00000077 D9E8                        fld1
   136 00000079 D8C0                        fadd    st0
   137 0000007B DEF1                        fdivr
   138                                  
   139                                      ; p *= k
   140 0000007D DCC9                        fmul    st1,st0
   141 0000007F DCCA                        fmul    st2,st0
   142 00000081 DCCB                        fmul    st3,st0
   143                                      ; scale *= k
   144 00000083 DCCC                        fmul    st4,st0
   145                                  
   146                                      ; Pop k
   147 00000085 DDD8                        fstp    st0
   148                                  
   149 00000087 48                          dec ax
   150 00000088 75C7                        jnz a_loop
   151                                  
   152                                      ; Compute distance
   153 0000008A D9E1                        fabs
   154 0000008C D8F3                        fdiv    st3
   155                                  
   156                                      ; Hacky colors
   157 0000008E D916[0400]                  fst dword [_bits]
   158 00000092 A0[0700]                    mov al, [_bits+3]
   159 00000095 2C10                        sub al,16
   160                                  
   161                                      ; Write pixel
   162 00000097 AA                          stosb
   163                                  
   164                                      ; Clean up stack
   165 00000098 DDD8                        fstp st0
   166 0000009A DDD8                        fstp st0
   167 0000009C DDD8                        fstp st0
   168 0000009E DDD8                        fstp st0
   169                                  
   170 000000A0 FF0E[0000]                  dec word [x]
   171 000000A4 7586                        jnz x_loop
   172                                  
   173 000000A6 FF0E[0200]                  dec word [y]
   174 000000AA 0F8578FF                    jnz y_loop
   175                                  
   176 000000AE FF06[C700]                  inc word [time]
   177                                  
   178                                      ; Check for keypress to exit
   179 000000B2 B401                        mov ah, 1
   180 000000B4 CD16                        int 16h
   181 000000B6 0F8450FF                    jz main_loop
   182                                  
   183 000000BA C3                          ret
   184                                  
   185                                  ; Data section
   186 000000BB 0AD7A33B                _0_005      dd  0.005
   187 000000BF 0000003F                _0_5        dd  0.5
   188 000000C3 CDCC4C3F                _0_8        dd  0.8
   189                                  
   190 000000C7 0000                    time        dw  0
   191                                  
   192                                  section .bss
   193 00000000 ????                    x           resb 2
   194 00000002 ????                    y           resb 2
   195                                  
   196 00000004 ????????                _bits       resb 4
   197 00000008 ????????                sin         resb 4
   198 0000000C ????????                cos         resb 4
   199                                  
