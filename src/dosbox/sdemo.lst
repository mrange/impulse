     1                                  ; Assemble with: nasm -f bin -o sdemo.com sdemo.asm -l sdemo.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0013h
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Set up the timer (channel 2)
    14                                      ; mov al, 10110110b    ; Channel 2, mode 3 (square wave), binary
    15                                      ; out 43h, al
    16                                  
    17                                      ; Enable speaker
    18 00000005 B033                        mov al, 33h
    19 00000007 E661                        out 61h, al
    20                                  
    21                                      ; Initialize video memory segment
    22 00000009 B800A0                      mov ax, 0A000h
    23 0000000C 8EC0                        mov es, ax
    24                                  
    25                                  main_loop:
    26                                      ; Load sin cos
    27 0000000E DF06[0000]                  fild word  [time]
    28 00000012 D80E[E900]                  fmul dword [_0_005]
    29 00000016 D9FB                        fsincos
    30 00000018 D91E[0E00]                  fstp dword [cos]
    31 0000001C D91E[0A00]                  fstp dword [sin]
    32                                  
    33                                      ; Reset position to start of video memory
    34 00000020 31FF                        xor di, di
    35                                  
    36                                      ; Audio reset
    37 00000022 31DB                        xor bx, bx
    38                                  
    39 00000024 C706[0400]C800              mov word [y], 200
    40                                  y_loop:
    41 0000002A C706[0200]4001              mov word [x], 320
    42                                  x_loop:
    43                                      ; Z (0.5)
    44 00000030 D906[ED00]                  fld dword [_0_5]
    45                                  
    46 00000034 DF06[0400]                  fild word [y]
    47 00000038 D80E[E900]                  fmul dword [_0_005]
    48 0000003C D9C1                        fld st1
    49 0000003E DEE9                        fsub
    50                                  
    51 00000040 DF06[0200]                  fild word [x]
    52 00000044 D80E[E900]                  fmul dword [_0_005]
    53 00000048 D826[F100]                  fsub dword [_0_8]
    54                                  
    55                                      ; expected stack
    56                                      ; ST(0) x
    57                                      ; ST(1) y
    58                                      ; ST(2) z
    59                                  
    60 0000004C B90300                      mov cx, 3
    61                                  t_loop:
    62 0000004F D9CA                        fxch st2
    63 00000051 D9C9                        fxch st1
    64                                  
    65                                      ; y' = y*cos - x*sin
    66 00000053 D9C1                        fld     st1
    67 00000055 D80E[0E00]                  fmul dword [cos]
    68 00000059 D9C1                        fld     st1
    69 0000005B D80E[0A00]                  fmul dword [sin]
    70 0000005F DEE9                        fsub
    71                                  
    72                                      ; x' = x*cos + y*sin
    73 00000061 D9C1                        fld     st1
    74 00000063 D80E[0E00]                  fmul dword [cos]
    75 00000067 D9C3                        fld     st3
    76 00000069 D80E[0A00]                  fmul dword [sin]
    77 0000006D DEC1                        fadd
    78                                  
    79                                      ; Overwrite x with x'
    80 0000006F DDDA                        fstp    st2
    81                                      ; Overwrite y with y'
    82 00000071 DDDA                        fstp    st2
    83                                  
    84 00000073 E2DA                        loop t_loop
    85                                  
    86                                      ; Scale
    87 00000075 D9E8                        fld1
    88 00000077 DDDC                        fstp st4
    89                                  
    90                                      ; expected stack
    91                                      ; ST(0) x
    92                                      ; ST(1) y
    93                                      ; ST(2) z
    94                                      ; ST(3) scale
    95                                  
    96                                      ; Appollian loop
    97 00000079 B80400                      mov ax,4
    98                                  a_loop:
    99                                      ; p -= 2.*round(0.5*p);
   100 0000007C D9EE                        fldz
   101 0000007E DDDD                        fstp st5
   102                                  
   103 00000080 B90300                      mov cx,3
   104                                  r_loop:
   105                                      ; Rotate ST(0..2)
   106 00000083 D9CA                        fxch st2
   107 00000085 D9C9                        fxch st1
   108                                      ; Dupe
   109 00000087 D9C0                        fld     st0
   110                                      ; Divide by 2
   111 00000089 D80E[ED00]                  fmul dword [_0_5]
   112 0000008D D9FC                        frndint
   113                                      ; Multiply by 2
   114 0000008F D8C0                        fadd    st0
   115 00000091 DEE9                        fsub
   116                                  
   117 00000093 D9C0                        fld     st0
   118 00000095 D8C8                        fmul    st0
   119 00000097 DEC5                        faddp   st5, st0
   120                                  
   121 00000099 E2E8                        loop r_loop
   122                                  
   123                                      ; k = 2/dot(p,p)
   124 0000009B D9E8                        fld1
   125 0000009D D8C0                        fadd    st0
   126 0000009F D8F5                        fdiv    st5
   127                                  
   128                                      ; p *= k
   129 000000A1 DCC9                        fmul    st1,st0
   130 000000A3 DCCA                        fmul    st2,st0
   131 000000A5 DCCB                        fmul    st3,st0
   132                                      ; scale *= k
   133 000000A7 DCCC                        fmul    st4,st0
   134                                  
   135                                      ; Pop k
   136 000000A9 DDD8                        fstp    st0
   137                                  
   138 000000AB 48                          dec ax
   139 000000AC 75CE                        jnz a_loop
   140                                  
   141                                      ; Compute distance
   142 000000AE D9E1                        fabs
   143 000000B0 D8F3                        fdiv    st3
   144                                  
   145                                      ; Hacky colors
   146 000000B2 D916[0600]                  fst dword [_bits]
   147 000000B6 A0[0900]                    mov al, [_bits+3]
   148 000000B9 2C10                        sub al,16
   149                                      ; Write pixel
   150 000000BB AA                          stosb
   151                                  
   152                                      ; Increment audio
   153 000000BC 01C3                        add bx, ax
   154                                  
   155                                      ; Clean up stack (if not the DosBox dynamic mode fails)
   156 000000BE DDD8                        fstp st0
   157 000000C0 DDD8                        fstp st0
   158 000000C2 DDD8                        fstp st0
   159                                  
   160 000000C4 FF0E[0200]                  dec word [x]
   161 000000C8 0F8564FF                    jnz x_loop
   162                                  
   163 000000CC FF0E[0400]                  dec word [y]
   164 000000D0 0F8556FF                    jnz y_loop
   165                                  
   166 000000D4 89D8                        mov ax, bx
   167                                      ; This is the wrong way to send audio but it sounds weird!
   168 000000D6 E742                        out 42h, ax
   169                                  
   170 000000D8 FF06[0000]                  inc word [time]
   171                                  
   172                                      ; Check for keypress to exit
   173 000000DC B401                        mov ah, 1
   174 000000DE CD16                        int 16h
   175 000000E0 0F842AFF                    jz main_loop
   176                                  
   177                                      ; Turn off the speaker
   178 000000E4 B030                        mov al, 30h
   179 000000E6 E661                        out 61h, al
   180                                  
   181 000000E8 C3                          ret
   182                                  
   183                                  ; Data section
   184 000000E9 0AD7A33B                _0_005      dd  0.005
   185 000000ED 0000003F                _0_5        dd  0.5
   186 000000F1 CDCC4C3F                _0_8        dd  0.8
   187                                  
   188                                  section .bss
   189 00000000 ????                    time        resb 2
   190 00000002 ????                    x           resb 2
   191 00000004 ????                    y           resb 2
   192                                  
   193 00000006 ????????                _bits       resb 4
   194 0000000A ????????                sin         resb 4
   195 0000000E ????????                cos         resb 4
   196                                  
