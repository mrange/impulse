     1                                  ; Assemble with: nasm -f bin -o demo_fp.com demo_fp.asm -l demo_fp.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  
     9                                  start:
    10 00000000 668D3E[1D14]                lea edi, [sine_table+1279*4]
    11                                  
    12                                  init_loop:
    13 00000005 DF06[1D00]                  fild word   [time]
    14 00000009 D80E[1000]                  fmul dword  [tau_1024]
    15 0000000D D9FE                        fsin
    16 0000000F D80E[1400]                  fmul dword  [to16_16]
    17 00000013 67DB1F                      fistp dword [edi]
    18 00000016 6683EF04                    sub edi, 4
    19 0000001A FF0E[1D00]                  dec word    [time]
    20 0000001E 75E5                        jnz init_loop
    21                                  
    22                                      ; Set video mode (320x200, 256 colors)
    23 00000020 B81300                      mov ax, 0013h
    24 00000023 CD10                        int 10h
    25                                  
    26                                      ; Initialize video memory segment
    27 00000025 B800A0                      mov ax, 0A000h
    28 00000028 8EC0                        mov es, ax
    29                                  
    30                                  main_loop:
    31 0000002A FF06[1D00]                  inc word [time]
    32                                  
    33 0000002E C706[1F00]0000              mov word [screen], 0
    34 00000034 C706[1B00]C800              mov word [y], 200
    35                                  y_loop:
    36 0000003A C706[1900]4001              mov word [x], 320
    37                                  x_loop:
    38                                      ; eax, edx compute
    39                                      ; ebx - X
    40                                      ; ecx - Y
    41                                      ; esi - Z
    42                                      ; edi - Scale
    43                                  
    44 00000040 668B36[0C00]                mov   esi, [_0_01]
    45                                  
    46 00000045 A1[1900]                    mov   ax , [x]
    47 00000048 66C1E010                    shl   eax, 16
    48 0000004C 66F7EE                      imul  esi
    49 0000004F 660FACD010                  shrd  eax, edx, 16
    50 00000054 662B06[0400]                sub   eax, [_1_6]
    51 00000059 6689C3                      mov   ebx, eax
    52                                  
    53 0000005C A1[1B00]                    mov   ax , [y]
    54 0000005F 66C1E010                    shl   eax, 16
    55 00000063 66F7EE                      imul  esi
    56 00000066 660FACD010                  shrd  eax, edx, 16
    57 0000006B 662B06[0000]                sub   eax, [_1]
    58 00000070 6689C1                      mov   ecx, eax
    59                                  
    60 00000073 668B36[0800]                mov   esi, [_0_5]
    61                                  
    62 00000078 668B3E[1D00]                mov   edi, [time]
    63 0000007D 6681E7FF030000              and   edi, 0x3FF
    64 00000084 66678D3CBD-                 lea   edi, [sine_table+edi*4]
    64 00000089 [21000000]         
    65                                  
    66                                      ; 'z = z*cos+y*sin
    67                                      ; 'y = y*cos-z*sin
    68 0000008D 6689F0                      mov   eax, esi
    69 00000090 6667F7AF00040000            imul  dword [edi+1024]
    70 00000098 660FACD010                  shrd  eax, edx, 16
    71 0000009D 6689C5                      mov   ebp, eax
    72                                  
    73 000000A0 6689C8                      mov   eax, ecx
    74 000000A3 6667F72F                    imul  dword [edi]
    75 000000A7 660FACD010                  shrd  eax, edx, 16
    76 000000AC 6601C5                      add   ebp, eax
    77                                  
    78 000000AF 6689C8                      mov   eax, ecx
    79 000000B2 6667F7AF00040000            imul  dword [edi+1024]
    80 000000BA 660FACD010                  shrd  eax, edx, 16
    81 000000BF 6689C1                      mov   ecx, eax
    82                                  
    83 000000C2 6689F0                      mov   eax, esi
    84 000000C5 6667F72F                    imul  dword [edi]
    85 000000C9 660FACD010                  shrd  eax, edx, 16
    86 000000CE 6629C1                      sub   ecx, eax
    87                                  
    88 000000D1 6689EE                      mov   esi, ebp
    89                                  
    90                                      ; 'x = x*cos+z*sin
    91                                      ; 'z = z*cos-x*sin
    92 000000D4 6689D8                      mov   eax, ebx
    93 000000D7 6667F7AF00040000            imul  dword [edi+1024]
    94 000000DF 660FACD010                  shrd  eax, edx, 16
    95 000000E4 6689C5                      mov   ebp, eax
    96                                  
    97 000000E7 6689F0                      mov   eax, esi
    98 000000EA 6667F72F                    imul  dword [edi]
    99 000000EE 660FACD010                  shrd  eax, edx, 16
   100 000000F3 6601C5                      add   ebp, eax
   101                                  
   102 000000F6 6689F0                      mov   eax, esi
   103 000000F9 6667F7AF00040000            imul  dword [edi+1024]
   104 00000101 660FACD010                  shrd  eax, edx, 16
   105 00000106 6689C6                      mov   esi, eax
   106                                  
   107 00000109 6689D8                      mov   eax, ebx
   108 0000010C 6667F72F                    imul  dword [edi]
   109 00000110 660FACD010                  shrd  eax, edx, 16
   110 00000115 6629C6                      sub   esi, eax
   111                                  
   112 00000118 6689EB                      mov   ebx, ebp
   113                                  
   114 0000011B 6689D8                      mov   eax, ebx
   115 0000011E 6667F7AF00040000            imul  dword [edi+1024]
   116 00000126 660FACD010                  shrd  eax, edx, 16
   117 0000012B 6689C5                      mov   ebp, eax
   118                                  
   119 0000012E 6689C8                      mov   eax, ecx
   120 00000131 6667F72F                    imul  dword [edi]
   121 00000135 660FACD010                  shrd  eax, edx, 16
   122 0000013A 6601C5                      add   ebp, eax
   123                                  
   124 0000013D 6689C8                      mov   eax, ecx
   125 00000140 6667F7AF00040000            imul  dword [edi+1024]
   126 00000148 660FACD010                  shrd  eax, edx, 16
   127 0000014D 6689C1                      mov   ecx, eax
   128                                  
   129 00000150 6689D8                      mov   eax, ebx
   130 00000153 6667F72F                    imul  dword [edi]
   131 00000157 660FACD010                  shrd  eax, edx, 16
   132 0000015C 6629C1                      sub   ecx, eax
   133                                  
   134 0000015F 6689EB                      mov   ebx, ebp
   135                                  
   136                                      ; Scale
   137 00000162 668B3E[0000]                mov   edi, [_1]
   138                                  
   139 00000167 C606[1800]04                mov   byte [a], 4
   140                                  a_loop:
   141                                      ; p -= 2*round(0.5*p)
   142 0000016C 6689D8                      mov   eax, ebx
   143 0000016F 66D1E8                      shr   eax, 1
   144 00000172 660306[0800]                add   eax, [_0_5]
   145 00000177 66250000FFFF                and   eax, 0FFFF0000h
   146 0000017D 6601C0                      add   eax, eax
   147 00000180 6629C3                      sub   ebx, eax
   148                                  
   149 00000183 6689C8                      mov   eax, ecx
   150 00000186 66D1E8                      shr   eax, 1
   151 00000189 660306[0800]                add   eax, [_0_5]
   152 0000018E 66250000FFFF                and   eax, 0FFFF0000h
   153 00000194 6601C0                      add   eax, eax
   154 00000197 6629C1                      sub   ecx, eax
   155                                  
   156 0000019A 6689F0                      mov   eax, esi
   157 0000019D 66D1E8                      shr   eax, 1
   158 000001A0 660306[0800]                add   eax, [_0_5]
   159 000001A5 66250000FFFF                and   eax, 0FFFF0000h
   160 000001AB 6601C0                      add   eax, eax
   161 000001AE 6629C6                      sub   esi, eax
   162                                  
   163                                      ; r2 = dot(p,p)
   164 000001B1 6689D8                      mov   eax, ebx
   165 000001B4 66F7E8                      imul  eax
   166 000001B7 660FACD010                  shrd  eax, edx, 16
   167 000001BC 6689C5                      mov   ebp, eax
   168                                  
   169 000001BF 6689C8                      mov   eax, ecx
   170 000001C2 66F7E8                      imul  eax
   171 000001C5 660FACD010                  shrd  eax, edx, 16
   172 000001CA 6601C5                      add   ebp, eax
   173                                  
   174 000001CD 6689F0                      mov   eax, esi
   175 000001D0 66F7E8                      imul  eax
   176 000001D3 660FACD010                  shrd  eax, edx, 16
   177 000001D8 6601C5                      add   ebp, eax
   178                                  
   179                                      ; To avoid overflows
   180 000001DB 6683C508                    add   ebp, 8
   181                                  
   182                                      ; k = 1/r2
   183 000001DF 6631C0                      xor   eax, eax
   184 000001E2 66BA02000000                mov   edx, 2
   185 000001E8 66F7FD                      idiv  ebp
   186 000001EB 6689C5                      mov   ebp, eax
   187                                  
   188                                      ; p *= k
   189 000001EE 6689D8                      mov   eax, ebx
   190 000001F1 66F7ED                      imul  ebp
   191 000001F4 660FACD010                  shrd  eax, edx, 16
   192 000001F9 6689C3                      mov   ebx, eax
   193                                  
   194 000001FC 6689C8                      mov   eax, ecx
   195 000001FF 66F7ED                      imul  ebp
   196 00000202 660FACD010                  shrd  eax, edx, 16
   197 00000207 6689C1                      mov   ecx, eax
   198                                  
   199 0000020A 6689F0                      mov   eax, esi
   200 0000020D 66F7ED                      imul  ebp
   201 00000210 660FACD010                  shrd  eax, edx, 16
   202 00000215 6689C6                      mov   esi, eax
   203                                  
   204                                      ; scale *= k
   205 00000218 6689F8                      mov   eax, edi
   206 0000021B 66F7ED                      imul  ebp
   207 0000021E 660FACD010                  shrd  eax, edx, 16
   208 00000223 6689C7                      mov   edi, eax
   209                                  .skip:
   210 00000226 FE0E[1800]                  dec byte [a]
   211 0000022A 0F853EFF                    jnz a_loop
   212                                  
   213                                      ; To avoid overflows
   214 0000022E 6683C708                    add edi, 8
   215                                  
   216 00000232 6631D2                      xor   edx, edx
   217 00000235 6689D8                      mov   eax,ebx
   218 00000238 6685C0                      test  eax,eax
   219 0000023B 7D03                        jge   .abs
   220 0000023D 66F7D8                      neg   eax
   221                                  .abs:
   222 00000240 660FA4C210                  shld  edx, eax, 16
   223 00000245 66C1E010                    shl   eax, 16
   224 00000249 66F7FF                      idiv  edi
   225                                  
   226 0000024C 660FBDC0                    bsr   eax, eax
   227 00000250 6683C020                    add   eax, 0x20
   228                                  
   229 00000254 8B3E[1F00]                  mov di, [screen]
   230                                      ; Write pixel
   231 00000258 AA                          stosb
   232 00000259 893E[1F00]                  mov [screen],di
   233                                  
   234 0000025D FF0E[1900]                  dec word [x]
   235 00000261 0F85DBFD                    jnz x_loop
   236                                  
   237 00000265 FF0E[1B00]                  dec word [y]
   238 00000269 0F85CDFD                    jnz y_loop
   239                                  
   240                                      ; Check for keypress to exit
   241 0000026D B401                        mov ah, 1
   242 0000026F CD16                        int 16h
   243 00000271 0F84B5FD                    jz main_loop
   244                                  
   245 00000275 C3                          ret
   246                                  
   247                                  ; Data section
   248                                  section .data
   249 00000000 00000100                _1          dd  0x00010000
   250 00000004 99990100                _1_6        dd  0x00019999
   251 00000008 00800000                _0_5        dd  0x00008000
   252 0000000C 8F020000                _0_01       dd  0x0000028F
   253 00000010 DB0FC93B                tau_1024    dd  0.00613592315154256491887235035797
   254 00000014 00008047                to16_16     dd  65536.0
   255                                  
   256 00000018 00                      a           db  0
   257 00000019 0000                    x           dw  0
   258 0000001B 0000                    y           dw  0
   259 0000001D FF04                    time        dw  1279
   260 0000001F 0000                    screen      dw  0
   261                                  
   262 00000021 0000                    sine_table  dw  0
