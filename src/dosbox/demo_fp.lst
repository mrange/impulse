     1                                  ; Assemble with: nasm -f bin -o demo_fp.com demo_fp.asm -l demo_fp.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9 00000000 668D3E[1C14]                lea edi, [sine_table+1279*4]
    10 00000005 DB06[0400]                  fild dword  [_1]
    11                                  init_loop:
    12 00000009 DF06[1400]                  fild word   [time]
    13 0000000D D80E[0000]                  fmul dword  [tau_1024]
    14 00000011 D9FE                        fsin
    15 00000013 D8C9                        fmul st1
    16 00000015 67DB1F                      fistp dword [edi]
    17 00000018 6683EF04                    sub edi, 4
    18 0000001C FF0E[1400]                  dec word    [time]
    19 00000020 75E7                        jnz init_loop
    20                                  
    21                                      ; Set video mode (320x200, 256 colors)
    22 00000022 B81300                      mov ax, 0013h
    23 00000025 CD10                        int 10h
    24                                  
    25                                      ; Initialize video memory segment
    26                                      ;   Might be initialized to 0 to save
    27 00000027 B800A0                      mov ax, 0A000h
    28 0000002A 8EC0                        mov es, ax
    29                                  
    30                                  main_loop:
    31 0000002C FF06[1400]                  inc word [time]
    32                                  
    33 00000030 C706[1E00]0000              mov word [screen], 0
    34 00000036 C706[1C00]C800              mov word [y], 200
    35                                  y_loop:
    36 0000003C C706[1A00]4001              mov word [x], 320
    37                                  x_loop:
    38                                  
    39 00000042 668B36[1000]                mov   esi, [_0_005]
    40                                  
    41 00000047 A1[1A00]                    mov   ax , [x]
    42 0000004A 66C1E010                    shl   eax, 16
    43 0000004E 66F7EE                      imul  esi
    44 00000051 660FACD010                  shrd  eax, edx, 16
    45 00000056 662B06[0800]                sub   eax, [_0_8]
    46 0000005B 6689C3                      mov   ebx, eax
    47                                  
    48 0000005E A1[1C00]                    mov   ax , [y]
    49 00000061 66C1E010                    shl   eax, 16
    50 00000065 66F7EE                      imul  esi
    51 00000068 660FACD010                  shrd  eax, edx, 16
    52 0000006D 668B36[0C00]                mov   esi, [_0_5]
    53 00000072 6629F0                      sub   eax, esi
    54 00000075 6689C1                      mov   ecx, eax
    55                                  
    56 00000078 668B3E[1400]                mov   edi, [time]
    57 0000007D 6681E7FF030000              and   edi, 0x3FF
    58 00000084 66678D3CBD-                 lea   edi, [sine_table+edi*4]
    58 00000089 [20000000]         
    59                                  
    60                                      ; eax - scratch
    61                                      ; edx - scratch
    62                                      ; ebx - X
    63                                      ; ecx - Y
    64                                      ; esi - Z
    65                                      ; edi - Scale
    66                                      ; ebp - scratch
    67                                      ; esp - Don't touch this
    68                                  
    69 0000008D C706[1600]0300              mov word [a], 3
    70                                  r_loop:
    71 00000093 6689D8                      mov   eax, ebx
    72 00000096 6689CB                      mov   ebx, ecx
    73 00000099 6689F1                      mov   ecx, esi
    74 0000009C 6689C6                      mov   esi, eax
    75                                  
    76                                      ; 'x = x*cos+y*sin
    77                                      ; 'y = y*cos-x*sin
    78 0000009F 6689D8                      mov   eax, ebx
    79 000000A2 6667F7AF00040000            imul  dword [edi+1024]
    80 000000AA 660FACD010                  shrd  eax, edx, 16
    81 000000AF 6689C5                      mov   ebp, eax
    82                                  
    83 000000B2 6689C8                      mov   eax, ecx
    84 000000B5 6667F72F                    imul  dword [edi]
    85 000000B9 660FACD010                  shrd  eax, edx, 16
    86 000000BE 6601C5                      add   ebp, eax
    87                                  
    88 000000C1 6689C8                      mov   eax, ecx
    89 000000C4 6667F7AF00040000            imul  dword [edi+1024]
    90 000000CC 660FACD010                  shrd  eax, edx, 16
    91 000000D1 6689C1                      mov   ecx, eax
    92                                  
    93 000000D4 6689D8                      mov   eax, ebx
    94 000000D7 6667F72F                    imul  dword [edi]
    95 000000DB 660FACD010                  shrd  eax, edx, 16
    96 000000E0 6629C1                      sub   ecx, eax
    97                                  
    98 000000E3 6689EB                      mov   ebx, ebp
    99                                  
   100 000000E6 FF0E[1600]                  dec word [a]
   101 000000EA 75A7                        jnz r_loop
   102                                  
   103                                      ; Scale
   104 000000EC 668B3E[0400]                mov   edi, [_1]
   105                                  
   106 000000F1 C706[1600]0400              mov   word [a], 4
   107                                  a_loop:
   108                                      ; eax - scratch
   109                                      ; edx - scratch
   110                                      ; ebx - X
   111                                      ; ecx - Y
   112                                      ; esi - Z
   113                                      ; edi - Scale
   114                                      ; ebp - Dot
   115                                      ; esp - Don't touch this
   116                                  
   117 000000F7 6631ED                      xor ebp, ebp
   118 000000FA C706[1800]0300              mov word [b], 3
   119                                  i_loop:
   120 00000100 6689D8                      mov   eax, ebx
   121 00000103 6689CB                      mov   ebx, ecx
   122 00000106 6689F1                      mov   ecx, esi
   123 00000109 6689C6                      mov   esi, eax
   124                                  
   125                                      ; p -= 2*floor(0.5*p+0.5)
   126 0000010C 6689D8                      mov   eax, ebx
   127 0000010F 66D1E8                      shr   eax, 1
   128 00000112 660306[0C00]                add   eax, [_0_5]
   129 00000117 31C0                        xor   ax, ax
   130 00000119 6601C0                      add   eax, eax
   131 0000011C 6629C3                      sub   ebx, eax
   132                                  
   133                                      ; r2 = dot(p,p)
   134 0000011F 6689D8                      mov   eax, ebx
   135 00000122 66F7E8                      imul  eax
   136 00000125 660FACD010                  shrd  eax, edx, 16
   137 0000012A 6601C5                      add   ebp, eax
   138                                  
   139 0000012D FF0E[1800]                  dec word [b]
   140 00000131 75CD                        jnz i_loop
   141                                  
   142                                      ; To avoid overflows
   143 00000133 6683C508                    add   ebp, 8
   144                                  
   145                                      ; k = 1/r2
   146 00000137 6631C0                      xor   eax, eax
   147 0000013A 66BA02000000                mov   edx, 2
   148 00000140 66F7FD                      idiv  ebp
   149 00000143 6689C5                      mov   ebp, eax
   150                                  
   151                                      ; p *= k
   152 00000146 6689D8                      mov   eax, ebx
   153 00000149 66F7ED                      imul  ebp
   154 0000014C 660FACD010                  shrd  eax, edx, 16
   155 00000151 6689C3                      mov   ebx, eax
   156                                  
   157 00000154 6689C8                      mov   eax, ecx
   158 00000157 66F7ED                      imul  ebp
   159 0000015A 660FACD010                  shrd  eax, edx, 16
   160 0000015F 6689C1                      mov   ecx, eax
   161                                  
   162 00000162 6689F0                      mov   eax, esi
   163 00000165 66F7ED                      imul  ebp
   164 00000168 660FACD010                  shrd  eax, edx, 16
   165 0000016D 6689C6                      mov   esi, eax
   166                                  
   167                                      ; scale *= k
   168 00000170 6689F8                      mov   eax, edi
   169 00000173 66F7ED                      imul  ebp
   170 00000176 660FACD010                  shrd  eax, edx, 16
   171 0000017B 6689C7                      mov   edi, eax
   172                                  .skip:
   173 0000017E FF0E[1600]                  dec word [a]
   174 00000182 0F8571FF                    jnz a_loop
   175                                  
   176                                      ; To avoid overflows
   177 00000186 6683C708                    add edi, 8
   178                                  
   179 0000018A 6631D2                      xor   edx, edx
   180 0000018D 6689D8                      mov   eax,ebx
   181 00000190 6685C0                      test  eax,eax
   182 00000193 7D03                        jge   .abs
   183 00000195 66F7D8                      neg   eax
   184                                  .abs:
   185 00000198 660FA4C210                  shld  edx, eax, 16
   186 0000019D 66C1E010                    shl   eax, 16
   187 000001A1 66F7FF                      idiv  edi
   188                                  
   189 000001A4 660FBDD8                    bsr   ebx, eax
   190 000001A8 6683C320                    add   ebx, 0x20
   191 000001AC 663B06[1000]                cmp   eax, [_0_005]
   192 000001B1 7D03                        jge   .outside
   193 000001B3 6631DB                      xor   ebx, ebx
   194                                  .outside:
   195                                  
   196 000001B6 6689D8                      mov   eax, ebx
   197                                  
   198 000001B9 8B3E[1E00]                  mov di, [screen]
   199                                      ; Write pixel
   200 000001BD AA                          stosb
   201 000001BE 893E[1E00]                  mov [screen],di
   202                                  
   203 000001C2 FF0E[1A00]                  dec word [x]
   204 000001C6 0F8578FE                    jnz x_loop
   205                                  
   206 000001CA FF0E[1C00]                  dec word [y]
   207 000001CE 0F856AFE                    jnz y_loop
   208                                  
   209                                      ; Check for keypress to exit
   210 000001D2 B401                        mov ah, 1
   211 000001D4 CD16                        int 16h
   212 000001D6 0F8452FE                    jz main_loop
   213                                  
   214 000001DA CD20                        int 0x20
   215                                  
   216                                  ; Data section
   217                                  section .data
   218                                  ; Can be reused
   219 00000000 DB0FC93B                tau_1024    dd  0.00613592315154256491887235035797
   220                                  
   221                                  
   222 00000004 00000100                _1          dd  0x00010000
   223 00000008 CCCC0000                _0_8        dd  0x0000CCCC
   224 0000000C 00800000                _0_5        dd  0x00008000
   225 00000010 47010000                _0_005      dd  0x00000147
   226                                  
   227 00000014 FF04                    time        dw  1279
   228 00000016 0000                    a           dw  0
   229 00000018 0000                    b           dw  0
   230 0000001A 0000                    x           dw  0
   231 0000001C 0000                    y           dw  0
   232 0000001E 0000                    screen      dw  0
   233                                  
   234 00000020 0000                    sine_table  dw  0
