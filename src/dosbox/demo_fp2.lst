     1                                  ; Assemble with: nasm -f bin -o demo_fp.com demo_fp.asm -l demo_fp.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0013h
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Initialize video memory segment
    14                                      ;   Might be initialized to 0 to save
    15 00000005 B800A0                      mov ax, 0A000h
    16 00000008 8EC0                        mov es, ax
    17                                  
    18 0000000A DB06[C501]                  fild dword  [_1]
    19                                  main_loop:
    20 0000000E DF06[CD01]                  fild word   [time]
    21 00000012 D80E[C101]                  fmul dword  [tau_1024]
    22 00000016 D9FB                        fsincos
    23 00000018 D8CA                        fmul st2
    24 0000001A DB1E[0E00]                  fistp dword [cos]
    25 0000001E D8C9                        fmul st1
    26 00000020 DB1E[0A00]                  fistp dword [sin]
    27 00000024 FF06[CD01]                  inc word [time]
    28                                  
    29 00000028 C706[0800]0000              mov word [screen], 0
    30 0000002E C706[0600]C800              mov word [y], 200
    31                                  y_loop:
    32 00000034 C706[0400]4001              mov word [x], 320
    33                                  x_loop:
    34                                  
    35 0000003A 668B36[C901]                mov   esi, [_0_005]
    36                                  
    37 0000003F A1[0400]                    mov   ax , [x]
    38 00000042 66C1E010                    shl   eax, 16
    39 00000046 66F7EE                      imul  esi
    40 00000049 660FACD010                  shrd  eax, edx, 16
    41                                      ; 0.8
    42 0000004E 662DCCCC0000                sub   eax, 0x0000CCCC
    43 00000054 6689C3                      mov   ebx, eax
    44                                  
    45 00000057 A1[0600]                    mov   ax , [y]
    46 0000005A 66C1E010                    shl   eax, 16
    47 0000005E 66F7EE                      imul  esi
    48 00000061 660FACD010                  shrd  eax, edx, 16
    49                                      ; 0.5
    50 00000066 66BE00800000                mov   esi, 0x00008000
    51 0000006C 6629F0                      sub   eax, esi
    52 0000006F 6689C1                      mov   ecx, eax
    53                                  
    54                                      ; eax - scratch
    55                                      ; edx - scratch
    56                                      ; ebx - X
    57                                      ; ecx - Y
    58                                      ; esi - Z
    59                                      ; ebp - scratch
    60                                      ; esp - Don't touch this
    61                                  
    62 00000072 C706[0000]0300              mov word [a], 3
    63                                  r_loop:
    64 00000078 6689D8                      mov   eax, ebx
    65 0000007B 6689CB                      mov   ebx, ecx
    66 0000007E 6689F1                      mov   ecx, esi
    67 00000081 6689C6                      mov   esi, eax
    68                                  
    69                                      ; 'x = x*cos+y*sin
    70                                      ; 'y = y*cos-x*sin
    71 00000084 6689D8                      mov   eax, ebx
    72 00000087 66F72E[0E00]                imul  dword [cos]
    73 0000008C 660FACD010                  shrd  eax, edx, 16
    74 00000091 6689C5                      mov   ebp, eax
    75                                  
    76 00000094 6689C8                      mov   eax, ecx
    77 00000097 66F72E[0A00]                imul  dword [sin]
    78 0000009C 660FACD010                  shrd  eax, edx, 16
    79 000000A1 6601C5                      add   ebp, eax
    80                                  
    81 000000A4 6689C8                      mov   eax, ecx
    82 000000A7 66F72E[0E00]                imul  dword [cos]
    83 000000AC 660FACD010                  shrd  eax, edx, 16
    84 000000B1 6689C1                      mov   ecx, eax
    85                                  
    86 000000B4 6689D8                      mov   eax, ebx
    87 000000B7 66F72E[0A00]                imul  dword [sin]
    88 000000BC 660FACD010                  shrd  eax, edx, 16
    89 000000C1 6629C1                      sub   ecx, eax
    90                                  
    91 000000C4 6689EB                      mov   ebx, ebp
    92                                  
    93 000000C7 FF0E[0000]                  dec word [a]
    94 000000CB 75AB                        jnz r_loop
    95                                  
    96                                      ; Scale
    97 000000CD 668B3E[C501]                mov   edi, [_1]
    98                                  
    99 000000D2 C706[0000]0400              mov   word [a], 4
   100                                  a_loop:
   101                                      ; eax - scratch
   102                                      ; edx - scratch
   103                                      ; ebx - X
   104                                      ; ecx - Y
   105                                      ; esi - Z
   106                                      ; edi - Scale
   107                                      ; ebp - Dot
   108                                      ; esp - Don't touch this
   109                                  
   110 000000D8 6631ED                      xor ebp, ebp
   111 000000DB C706[0200]0300              mov word [b], 3
   112                                  i_loop:
   113 000000E1 6689D8                      mov   eax, ebx
   114 000000E4 6689CB                      mov   ebx, ecx
   115 000000E7 6689F1                      mov   ecx, esi
   116 000000EA 6689C6                      mov   esi, eax
   117                                  
   118                                      ; p -= 2*floor((p+1)/2)
   119 000000ED 6689D8                      mov   eax, ebx
   120 000000F0 660306[C501]                add   eax, [_1]
   121 000000F5 66D1E8                      shr   eax, 1
   122 000000F8 31C0                        xor   ax, ax
   123 000000FA 6601C0                      add   eax, eax
   124 000000FD 6629C3                      sub   ebx, eax
   125                                  
   126                                      ; r2 = dot(p,p)
   127 00000100 6689D8                      mov   eax, ebx
   128 00000103 66F7E8                      imul  eax
   129 00000106 660FACD010                  shrd  eax, edx, 16
   130 0000010B 6601C5                      add   ebp, eax
   131                                  
   132 0000010E FF0E[0200]                  dec word [b]
   133 00000112 75CD                        jnz i_loop
   134                                  
   135                                      ; To avoid overflows
   136 00000114 6683C508                    add   ebp, 8
   137                                  
   138                                      ; k = 1/r2
   139 00000118 6631C0                      xor   eax, eax
   140 0000011B 66BA02000000                mov   edx, 2
   141 00000121 66F7FD                      idiv  ebp
   142 00000124 6689C5                      mov   ebp, eax
   143                                  
   144                                      ; p *= k
   145 00000127 6689D8                      mov   eax, ebx
   146 0000012A 66F7ED                      imul  ebp
   147 0000012D 660FACD010                  shrd  eax, edx, 16
   148 00000132 6689C3                      mov   ebx, eax
   149                                  
   150 00000135 6689C8                      mov   eax, ecx
   151 00000138 66F7ED                      imul  ebp
   152 0000013B 660FACD010                  shrd  eax, edx, 16
   153 00000140 6689C1                      mov   ecx, eax
   154                                  
   155 00000143 6689F0                      mov   eax, esi
   156 00000146 66F7ED                      imul  ebp
   157 00000149 660FACD010                  shrd  eax, edx, 16
   158 0000014E 6689C6                      mov   esi, eax
   159                                  
   160                                      ; scale *= k
   161 00000151 6689F8                      mov   eax, edi
   162 00000154 66F7ED                      imul  ebp
   163 00000157 660FACD010                  shrd  eax, edx, 16
   164 0000015C 6689C7                      mov   edi, eax
   165                                  .skip:
   166 0000015F FF0E[0000]                  dec word [a]
   167 00000163 0F8571FF                    jnz a_loop
   168                                  
   169                                      ; To avoid overflows
   170 00000167 6683C708                    add edi, 8
   171                                  
   172 0000016B 6631D2                      xor   edx, edx
   173 0000016E 6689D8                      mov   eax,ebx
   174 00000171 6685C0                      test  eax,eax
   175 00000174 7D03                        jge   .abs
   176 00000176 66F7D8                      neg   eax
   177                                  .abs:
   178 00000179 660FA4C210                  shld  edx, eax, 16
   179 0000017E 66C1E010                    shl   eax, 16
   180 00000182 66F7FF                      idiv  edi
   181                                  
   182 00000185 660FBDD8                    bsr   ebx, eax
   183 00000189 6683C320                    add   ebx, 0x20
   184 0000018D 663B06[C901]                cmp   eax, [_0_005]
   185 00000192 7D03                        jge   .outside
   186 00000194 6631DB                      xor   ebx, ebx
   187                                  .outside:
   188                                  
   189 00000197 6689D8                      mov   eax, ebx
   190                                  
   191 0000019A 8B3E[0800]                  mov di, [screen]
   192                                      ; Write pixel
   193 0000019E AA                          stosb
   194 0000019F 893E[0800]                  mov [screen],di
   195                                  
   196 000001A3 FF0E[0400]                  dec word [x]
   197 000001A7 0F858FFE                    jnz x_loop
   198                                  
   199 000001AB FF0E[0600]                  dec word [y]
   200 000001AF 0F8581FE                    jnz y_loop
   201                                  
   202                                      ; Check for keypress to exit
   203 000001B3 B401                        mov ah, 1
   204 000001B5 CD16                        int 16h
   205 000001B7 0F8453FE                    jz main_loop
   206                                  
   207                                      ; Restore text mode
   208 000001BB B80300                      mov ax, 0x0003
   209 000001BE CD10                        int 0x10
   210                                  
   211 000001C0 C3                          ret
   212                                  
   213                                  ; Data section
   214                                  ;   Can be reused
   215 000001C1 DB0FC93B                tau_1024    dd  0.00613592315154256491887235035797
   216 000001C5 00000100                _1          dd  0x00010000
   217 000001C9 47010000                _0_005      dd  0x00000147
   218 000001CD 0000                    time        dw  0
   219                                  
   220                                  section .bss
   221 00000000 ????                    a           resb 2
   222 00000002 ????                    b           resb 2
   223 00000004 ????                    x           resb 2
   224 00000006 ????                    y           resb 2
   225 00000008 ????                    screen      resb 2
   226 0000000A ????????                sin         resb 4
   227 0000000E ????????                cos         resb 4
   228                                  
