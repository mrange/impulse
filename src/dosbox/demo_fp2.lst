     1                                  ; Assemble with: nasm -f bin -o demo_fp.com demo_fp.asm -l demo_fp.lst
     2                                  
     3                                      ; 16-bit code
     4                                      BITS 16
     5                                       ; COM programs start at offset 100h
     6                                      ORG 100h
     7                                  
     8                                  start:
     9                                      ; Set video mode (320x200, 256 colors)
    10 00000000 B81300                      mov ax, 0013h
    11 00000003 CD10                        int 10h
    12                                  
    13                                      ; Initialize video memory segment
    14                                      ;   Might be initialized to 0 to save
    15 00000005 B800A0                      mov ax, 0A000h
    16 00000008 8EC0                        mov es, ax
    17                                  
    18 0000000A C706[0800]0000              mov word [time], 0
    19 00000010 DB06[CB01]                  fild dword  [_1]
    20                                  main_loop:
    21 00000014 DF06[0800]                  fild word   [time]
    22 00000018 D80E[C701]                  fmul dword  [tau_1024]
    23 0000001C D9FB                        fsincos
    24 0000001E D8CA                        fmul st2
    25 00000020 DB1E[1000]                  fistp dword [cos]
    26 00000024 D8C9                        fmul st1
    27 00000026 DB1E[0C00]                  fistp dword [sin]
    28 0000002A FF06[0800]                  inc word [time]
    29                                  
    30 0000002E C706[0A00]0000              mov word [screen], 0
    31 00000034 C706[0600]C800              mov word [y], 200
    32                                  y_loop:
    33 0000003A C706[0400]4001              mov word [x], 320
    34                                  x_loop:
    35                                  
    36 00000040 668B36[CF01]                mov   esi, [_0_005]
    37                                  
    38 00000045 A1[0400]                    mov   ax , [x]
    39 00000048 66C1E010                    shl   eax, 16
    40 0000004C 66F7EE                      imul  esi
    41 0000004F 660FACD010                  shrd  eax, edx, 16
    42                                      ; 0.8
    43 00000054 662DCCCC0000                sub   eax, 0x0000CCCC
    44 0000005A 6689C3                      mov   ebx, eax
    45                                  
    46 0000005D A1[0600]                    mov   ax , [y]
    47 00000060 66C1E010                    shl   eax, 16
    48 00000064 66F7EE                      imul  esi
    49 00000067 660FACD010                  shrd  eax, edx, 16
    50                                      ; 0.5
    51 0000006C 66BE00800000                mov   esi, 0x00008000
    52 00000072 6629F0                      sub   eax, esi
    53 00000075 6689C1                      mov   ecx, eax
    54                                  
    55                                      ; eax - scratch
    56                                      ; edx - scratch
    57                                      ; ebx - X
    58                                      ; ecx - Y
    59                                      ; esi - Z
    60                                      ; ebp - scratch
    61                                      ; esp - Don't touch this
    62                                  
    63 00000078 C706[0000]0300              mov word [a], 3
    64                                  r_loop:
    65 0000007E 6689D8                      mov   eax, ebx
    66 00000081 6689CB                      mov   ebx, ecx
    67 00000084 6689F1                      mov   ecx, esi
    68 00000087 6689C6                      mov   esi, eax
    69                                  
    70                                      ; 'x = x*cos+y*sin
    71                                      ; 'y = y*cos-x*sin
    72 0000008A 6689D8                      mov   eax, ebx
    73 0000008D 66F72E[1000]                imul  dword [cos]
    74 00000092 660FACD010                  shrd  eax, edx, 16
    75 00000097 6689C5                      mov   ebp, eax
    76                                  
    77 0000009A 6689C8                      mov   eax, ecx
    78 0000009D 66F72E[0C00]                imul  dword [sin]
    79 000000A2 660FACD010                  shrd  eax, edx, 16
    80 000000A7 6601C5                      add   ebp, eax
    81                                  
    82 000000AA 6689C8                      mov   eax, ecx
    83 000000AD 66F72E[1000]                imul  dword [cos]
    84 000000B2 660FACD010                  shrd  eax, edx, 16
    85 000000B7 6689C1                      mov   ecx, eax
    86                                  
    87 000000BA 6689D8                      mov   eax, ebx
    88 000000BD 66F72E[0C00]                imul  dword [sin]
    89 000000C2 660FACD010                  shrd  eax, edx, 16
    90 000000C7 6629C1                      sub   ecx, eax
    91                                  
    92 000000CA 6689EB                      mov   ebx, ebp
    93                                  
    94 000000CD FF0E[0000]                  dec word [a]
    95 000000D1 75AB                        jnz r_loop
    96                                  
    97                                      ; Scale
    98 000000D3 668B3E[CB01]                mov   edi, [_1]
    99                                  
   100 000000D8 C706[0000]0400              mov   word [a], 4
   101                                  a_loop:
   102                                      ; eax - scratch
   103                                      ; edx - scratch
   104                                      ; ebx - X
   105                                      ; ecx - Y
   106                                      ; esi - Z
   107                                      ; edi - Scale
   108                                      ; ebp - Dot
   109                                      ; esp - Don't touch this
   110                                  
   111 000000DE 6631ED                      xor ebp, ebp
   112 000000E1 C706[0200]0300              mov word [b], 3
   113                                  i_loop:
   114 000000E7 6689D8                      mov   eax, ebx
   115 000000EA 6689CB                      mov   ebx, ecx
   116 000000ED 6689F1                      mov   ecx, esi
   117 000000F0 6689C6                      mov   esi, eax
   118                                  
   119                                      ; p -= 2*floor((p+1)/2)
   120 000000F3 6689D8                      mov   eax, ebx
   121 000000F6 660306[CB01]                add   eax, [_1]
   122 000000FB 66D1E8                      shr   eax, 1
   123 000000FE 31C0                        xor   ax, ax
   124 00000100 6601C0                      add   eax, eax
   125 00000103 6629C3                      sub   ebx, eax
   126                                  
   127                                      ; r2 = dot(p,p)
   128 00000106 6689D8                      mov   eax, ebx
   129 00000109 66F7E8                      imul  eax
   130 0000010C 660FACD010                  shrd  eax, edx, 16
   131 00000111 6601C5                      add   ebp, eax
   132                                  
   133 00000114 FF0E[0200]                  dec word [b]
   134 00000118 75CD                        jnz i_loop
   135                                  
   136                                      ; To avoid overflows
   137 0000011A 6683C508                    add   ebp, 8
   138                                  
   139                                      ; k = 1/r2
   140 0000011E 6631C0                      xor   eax, eax
   141 00000121 66BA02000000                mov   edx, 2
   142 00000127 66F7FD                      idiv  ebp
   143 0000012A 6689C5                      mov   ebp, eax
   144                                  
   145                                      ; p *= k
   146 0000012D 6689D8                      mov   eax, ebx
   147 00000130 66F7ED                      imul  ebp
   148 00000133 660FACD010                  shrd  eax, edx, 16
   149 00000138 6689C3                      mov   ebx, eax
   150                                  
   151 0000013B 6689C8                      mov   eax, ecx
   152 0000013E 66F7ED                      imul  ebp
   153 00000141 660FACD010                  shrd  eax, edx, 16
   154 00000146 6689C1                      mov   ecx, eax
   155                                  
   156 00000149 6689F0                      mov   eax, esi
   157 0000014C 66F7ED                      imul  ebp
   158 0000014F 660FACD010                  shrd  eax, edx, 16
   159 00000154 6689C6                      mov   esi, eax
   160                                  
   161                                      ; scale *= k
   162 00000157 6689F8                      mov   eax, edi
   163 0000015A 66F7ED                      imul  ebp
   164 0000015D 660FACD010                  shrd  eax, edx, 16
   165 00000162 6689C7                      mov   edi, eax
   166                                  .skip:
   167 00000165 FF0E[0000]                  dec word [a]
   168 00000169 0F8571FF                    jnz a_loop
   169                                  
   170                                      ; To avoid overflows
   171 0000016D 6683C708                    add edi, 8
   172                                  
   173 00000171 6631D2                      xor   edx, edx
   174 00000174 6689D8                      mov   eax,ebx
   175 00000177 6685C0                      test  eax,eax
   176 0000017A 7D03                        jge   .abs
   177 0000017C 66F7D8                      neg   eax
   178                                  .abs:
   179 0000017F 660FA4C210                  shld  edx, eax, 16
   180 00000184 66C1E010                    shl   eax, 16
   181 00000188 66F7FF                      idiv  edi
   182                                  
   183 0000018B 660FBDD8                    bsr   ebx, eax
   184 0000018F 6683C320                    add   ebx, 0x20
   185 00000193 663B06[CF01]                cmp   eax, [_0_005]
   186 00000198 7D03                        jge   .outside
   187 0000019A 6631DB                      xor   ebx, ebx
   188                                  .outside:
   189                                  
   190 0000019D 6689D8                      mov   eax, ebx
   191                                  
   192 000001A0 8B3E[0A00]                  mov di, [screen]
   193                                      ; Write pixel
   194 000001A4 AA                          stosb
   195 000001A5 893E[0A00]                  mov [screen],di
   196                                  
   197 000001A9 FF0E[0400]                  dec word [x]
   198 000001AD 0F858FFE                    jnz x_loop
   199                                  
   200 000001B1 FF0E[0600]                  dec word [y]
   201 000001B5 0F8581FE                    jnz y_loop
   202                                  
   203                                      ; Check for keypress to exit
   204 000001B9 B401                        mov ah, 1
   205 000001BB CD16                        int 16h
   206 000001BD 0F8453FE                    jz main_loop
   207                                  
   208                                      ; Restore text mode
   209 000001C1 B80300                      mov ax, 0x0003
   210 000001C4 CD10                        int 0x10
   211                                  
   212 000001C6 C3                          ret
   213                                  
   214                                  ; Data section
   215                                  ;   Can be reused
   216 000001C7 DB0FC93B                tau_1024    dd  0.00613592315154256491887235035797
   217 000001CB 00000100                _1          dd  0x00010000
   218 000001CF 47010000                _0_005      dd  0x00000147
   219                                  
   220                                  section .bss
   221 00000000 ????                    a           resb 2
   222 00000002 ????                    b           resb 2
   223 00000004 ????                    x           resb 2
   224 00000006 ????                    y           resb 2
   225 00000008 ????                    time        resb 2
   226 0000000A ????                    screen      resb 2
   227 0000000C ????????                sin         resb 4
   228 00000010 ????????                cos         resb 4
   229                                  
